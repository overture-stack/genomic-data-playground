version: '3.7'
services:
  ego-server:
    image: "overture/ego:2.9.0"
    environment:
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://ego-db:5432/ego?stringtype=unspecified
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_LOCATIONS: "classpath:flyway/sql,classpath:db/migration"
      SPRING_PROFILES: demo, auth
    expose:
      - "8080"
    ports:
      - "9082:8080"
    command: java -jar /srv/ego/install/ego.jar
    depends_on:
      - ego-db
  ego-db:
    image: postgres:9.5
    environment:
      - POSTGRES_DB=ego
      - POSTGRES_PASSWORD=password
    expose:
      - "5432"
    volumes:
      - "./ego-init:/docker-entrypoint-initdb.d"
    ports:
      - "9444:5432"
  object-storage:
    #NOTE: must use 2018-05-11 version, since the ETag rules are different. 2018 will return the part md5, anything newer will not, and score-server expects etag==md5
    image: minio/minio:RELEASE.2018-05-11T00-29-24Z
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    ports:
      - "8085:9000"
  score-server:
    image: overture/score-server:2.0.1
    user: "$MY_UID:$MY_GID"
    environment:
      SPRING_PROFILES_ACTIVE: amazon,collaboratory,prod,secure
      SERVER_PORT: 8080
      OBJECT_SENTINEL: heliograph
      BUCKET_NAME_OBJECT: oicr.icgc.test
      BUCKET_NAME_STATE: oicr.icgc.test
      COLLABORATORY_DATA_DIRECTORY: data
      METADATA_URL: http://song-server:8080
      S3_ENDPOINT:  http://object-storage:9000
      S3_ACCESSKEY: minio
      S3_SECRETKEY: minio123
      S3_SIGV4ENABLED: "true"
      AUTH_SERVER_URL: http://ego-server:8080/o/check_token/
      AUTH_SERVER_CLIENTID: score
      AUTH_SERVER_CLIENTSECRET: scoresecret
      AUTH_SERVER_UPLOADSCOPE: score.WRITE
      AUTH_SERVER_DOWNLOADSCOPE: score.READ
      SERVER_SSL_ENABLED: "false"
      UPLOAD_PARTSIZE: 1073741824
      UPLOAD_CONNECTION_TIMEOUT: 1200000
      LOGGING_LEVEL_BIO_OVERTURE_SCORE_SERVER: DEBUG
      LOGGING_LEVEL_ORG_APACHE_HTTP_WIRE: DEBUG
      LOGGING_LEVEL_ORG_APACHE_HTTP_HEADERS: DEBUG
      ENDPOINTS_DUMP_ENABLED: "false"
      ENDPOINTS_ENV_ENABLED: "true"
      ENDPOINTS_INFO_ENABLED: "true"
    ports:
      - "8087:8080"
    depends_on:
      - object-storage
      - ego-server
    volumes:
      - "./scratch/score-server-logs:/score-server/logs"
  score-client:
    image: overture/score:2.0.1
    user: "$MY_UID:$MY_GID"
    environment:
      ACCESSTOKEN: f69b726d-d40f-4261-b105-1ec7e6bf04d5
      METADATA_URL: http://song-server:8080
      STORAGE_URL: http://score-server:8080
    volumes:
      - "./song-example-data:/song-client/input"
      - "./scratch/score-client-logs:/score-client/logs"
      - "./scratch/score-client-output:/score-client/output"
      - "./scratch/song-client-output:/song-client/output"
    command: bin/score-client
  song-db:
    image: "postgres:9.6"
    environment:
      POSTGRES_DB: song
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - "./song-db-init:/docker-entrypoint-initdb.d"
  aws-cli:
    image: "mesosphere/aws-cli:latest"
    environment:
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      AWS_DEFAULT_REGION: us-east-1
    volumes:
      - "./object-storage-init/data/oicr.icgc.test/data:/score-data:ro"
  song-client:
    image: overture/song-client:4.1.1
    user: "$MY_UID:$MY_GID"
    environment:
      CLIENT_ACCESS_TOKEN: f69b726d-d40f-4261-b105-1ec7e6bf04d5
      CLIENT_STUDY_ID: ABC123
      CLIENT_DEBUG: "true"
      CLIENT_SERVER_URL: http://song-server:8080
    volumes:
      - "./song-example-data:/song-client/input"
      - "./scratch/song-client-logs:/song-client/logs"
      - "./scratch/song-client-output:/song-client/output"
    command: ["java", "--illegal-access=deny", "-Dlog.name=song", "-Dlog.path=/song-client/logs", "-Dlogback.configurationFile=/song-client/conf/logback.xml", "-jar", "/song-client/lib/song-client.jar", "/song-client/conf/application.yml"]
  song-server:
    image: overture/song-server:4.1.1
    environment:
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: "prod,secure,default"
      AUTH_SERVER_URL: http://ego-server:8080/o/check_token/
      AUTH_SERVER_CLIENTID: song
      AUTH_SERVER_CLIENTSECRET: songsecret
      AUTH_SERVER_SCOPE_STUDY_PREFIX: song.
      AUTH_SERVER_SCOPE_STUDY_SUFFIX: .WRITE
      AUTH_SERVER_SCOPE_SYSTEM: song.WRITE
      SCORE_URL: http://score-server:8080
      SCORE_ACCESSTOKEN: f69b726d-d40f-4261-b105-1ec7e6bf04d5
      MANAGEMENT_SERVER_PORT: 8081
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_DATASOURCE_URL: jdbc:postgresql://song-db/song?stringtype=unspecified
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_LOCATIONS: "classpath:db/migration"
      ID_USELOCAL: "true"
    ports:
      - "8080:8080"
    depends_on:
      - song-db 
      - ego-server
      - score-server
    volumes:
      - "./scratch/song-server-logs:/song-server/logs"
  maestro:
    image: overture/maestro:latest
    container_name: maestro
    ports:
      - 11235:11235
    environment:
      - maestro.elasticsearch.cluster-nodes=elasticsearch.maestro.local:9200
      - spring.cloud.stream.kafka.binder.brokers=kafka.maestro.local:9092
      - management.health.elasticsearch.enabled=false
      - management.security.enabled=false
      - MAESTRO_REPOSITORIES_0_CODE=local_song
      - MAESTRO_REPOSITORIES_0_URL=http://song-server:8080 # or whatever url it is
      - MAESTRO_REPOSITORIES_0_NAME=local_song_city
      - MAESTRO_REPOSITORIES_0_DATAPATH=/project/data
      - MAESTRO_REPOSITORIES_0_METADATAPATH=/metadata/data
      - MAESTRO_REPOSITORIES_0_ORGANIZATION=local_song_organization
      - MAESTRO_REPOSITORIES_0_COUNTRY=local_song_country
    depends_on:
       - elasticsearch
       - broker
  admin:
    image: basharlabadi/vanilla-admin-boot:0.0.2
    environment:
      - spring.boot.admin.security.enabled=false
    ports:
      - 1122:1122
    healthcheck:
      test: "curl -sS http://localhost:1111/health"
      interval: 1s
      timeout: 60s
      retries: 120
    container_name: boot-admin

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.0
    container_name: elasticsearch.maestro.local
    ports:
      - 9200:9200
    environment:
      - discovery.type=single-node
      - cluster.name=maestro.elasticsearch
      - "ES_JAVA_OPTS=-Xms512m -Xmx2048m"
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
  # see : https://docs.confluent.io/current/quickstart/ce-docker-quickstart.html#ce-docker-quickstart
  broker:
    image: confluentinc/cp-kafka:5.4.0
    hostname: kafka.maestro.local
    container_name: kafka.maestro.local
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka.maestro.local:29092,PLAINTEXT_HOST://kafka.maestro.local:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka.maestro.local:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - /tmp/kafka:/kafka

  rest-proxy:
    image: confluentinc/cp-kafka-rest:5.4.0
    depends_on:
      - zookeeper
      - broker
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka.maestro.local:29092
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"

  kibana:
    image: docker.elastic.co/kibana/kibana:7.5.0
    ports:
      - 5601:5601
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    depends_on:
      - elasticsearch
    environment:
      LOGGING_QUIET: "true"

  arranger-server:
    build:
      context: ./arranger
      dockerfile: server.Dockerfile
    container_name: arranger-server.local
    depends_on:
      - elasticsearch
      - kibana
    ports:
      - 5050:5050
    environment:
      ES_HOST: http://elasticsearch.maestro.local:9200

  arranger-ui:
    build:
      context: ./arranger
      dockerfile: ui.Dockerfile
    hostname: arranger-ui.local
    container_name: arranger-ui.local
    depends_on:
      - arranger-server
    ports:
      - 9080:8080
      - 9081:8081

